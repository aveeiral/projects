# -*- coding: utf-8 -*-
"""PySpark DE.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jAzqPnJtqgWNS7qGXDAbV_RbEjfKxGAe
"""

!pip install pyspark

"""Create a spark session for code and appname for build and create"""

from pyspark.sql import SparkSession, Window
spark = SparkSession.builder.appName("DataAnalysis").getOrCreate()

#import necessary libraries
import pandas as pd
from pyspark.sql.functions import *

#Load the Dataset
df_matches = spark.read.format('csv').options(header = 'True').load('/content/drive/MyDrive/Colab Notebooks/Data/Matches.csv')
df_matches.show()

"""Meaning of the features :

Match_ID : Unique identifier for each match

Div : Championship level (D1 = first level, D2 = second level, E0 = third level)

Season : Starting year of the season in which the match took place

Date : Date of the match

HomeTeam : Team playing in its stadium

AwayTeam : Team playing in the opposing team's stadium

FTHG : Number of goals of Home Team

FTAG : Number of goals of Away Team

FTR : Final Result
"""

# Rename columns
df_matches = df_matches.withColumnRenamed("FTHG", "Home_Goals")
df_matches = df_matches.withColumnRenamed("FTAG", "Away_Goals")
df_matches = df_matches.withColumnRenamed("FTR", "FinalResult")
df_matches.show()

#preview the data in pandas datafram
pandas_df = df_matches.toPandas()
pandas_df.head(10)

# Add new column in pyspark
df_matches = df_matches.withColumn("HomeTeamWin", when(col("FinalResult") == "H", 1).otherwise(0)) \
    .withColumn("AwayTeamWin", when(col("FinalResult") == "A", 1).otherwise(0)) \
    .withColumn("Draw", when(col("FinalResult") == "D", 1).otherwise(0))

df_matches.show()

df_bundesliga = df_matches.filter((col("Div") == "D1") &
                                 (col("Season") >= 2000) &
                                 (col("Season") <= 2015))
df_bundesliga.show()

#Analyzing Home Performances of teams
df_home_matches = df_bundesliga.groupBy('Season', 'HomeTeam') \
    .agg(sum('HomeTeamWin').alias('TotalHomeWin'),
         sum('AwayTeamWin').alias('TotalHomeLoss'),
         sum('Draw').alias('TotalHomeDraw'),
         sum('Home_Goals').alias('HomeScoredGoals'),
         sum('Away_Goals').alias('HomeAgainstGoals')) \
         .withColumnRenamed('HomeTeam', 'Team')

df_home_matches.toPandas().head(10)

#Analyzing Away Performances of teams
df_away_matches = df_bundesliga.groupBy('Season', 'AwayTeam') \
    .agg(sum('AwayTeamWin').alias('TotalAwayWin'),
         sum('HomeTeamWin').alias('TotalAwayLoss'),
         sum('Draw').alias('TotalAwayDraw'),
         sum('Away_Goals').alias('AwayScoredGoals'),
         sum('Home_Goals').alias('AwayAgainstdGoals')) \
         .withColumnRenamed('AwayTeam', 'Team')

df_away_matches.toPandas().head(10)

#Merging home and Away df to 1 table for further analyzing
df_merged = df_home_matches.join(df_away_matches, ['Season', 'Team'], 'inner')
df_merged.toPandas().head(10)

#create column for total score and result
df_totals = df_merged.withColumn('GoalsScore', col('HomeScoredGoals') + col('AwayScoredGoals')) \
                     .withColumn('GoalsAgainst', col('HomeAgainstGoals') + col('AwayAgainstdGoals')) \
                     .withColumn('Win', col('TotalHomeWin') + col('TotalAwayWin')) \
                     .withColumn('Loss', col('TotalHomeLoss') + col('TotalAwayLoss')) \
                     .withColumn('Draw', col('TotalHomeDraw') + col('TotalAwayDraw'))

df_totals.toPandas()

#Drop Un necessary columns
cols_to_drop = ['HomeScoredGoals', 'AwayScoredGoals', 'AwayAgainstdGoals', 'HomeAgainstGoals', 'TotalHomeWin', 'TotalAwayWin'
                , 'TotalHomeLoss', 'TotalAwayLoss', 'TotalHomeDraw', 'TotalAwayDraw']

#cleaned df
df_totals_cleaned = df_totals.drop(*cols_to_drop)


df_totals_cleaned.toPandas()

#Create percentage columns

df_processed = df_totals_cleaned.withColumn('GOalDifferentials', col('GoalsScore') - col('GoalsAgainst')) \
                                .withColumn('WinPercentage', round(( 100* col('Win') / (col('Win') + col('Loss') + col('Draw'))), 2))

df_processed.toPandas()

#set window partition
window_partition = Window.partitionBy('Season').orderBy(col('WinPercentage').desc(), col('GoalDifferentials').desc() )

#Rank Teams by season
df_ranked = df_processed.withColumn('TeamPosition', rank().over(window_partition))


df_rankP = df_ranked.toPandas()

#Reindexing the columns
df_rankP.columns

df_ranked_pandas = df_rankP.reindex(columns=['Team', 'Season', 'TeamPosition', 'GoalsScore', 'GoalsAgainst', 'Win', 'Loss', 'Draw',
       'GOalDifferentials', 'WinPercentage'])
df_ranked_pandas