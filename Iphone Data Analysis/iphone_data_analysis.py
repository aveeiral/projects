# -*- coding: utf-8 -*-
"""Iphone Data Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rm8q0mL2vbPmT0BhaD9waLMYVgO5w_A2
"""



"""Note : Read the iphone.csv dataset to pandas dataframe

1 - The column names have spaces . rename the column names to have underscore '_' instead of space (try to do in one go instead of specifying each column nam in rename method)

2- start rating for some of the models is missing in the dataset. fill those missing values with the average rating all the models.

3- Now instead of filling missing values with avg rating of full dataset , fill with avg rating based on RAM. example :  if rating for a 2 gb phone is missing then take average of all other 2 gb phones rating and fill that value.

4- create a new column in the dataframe "Discount_Percentage" based on MRP and sale value

5- which model has highest percent discount ?

6- find total no of models  each space configuration (128 GB , 64 GB etc)

7- find total number of models for each color

8- find total number of models by iphone version : eg
iphone 8:  9
iphone XR : 5

so on..

9- list top 5 models having highest no of reviews

10 - what is the price diffrence between highest price and lowest price iphone (based on mrp)

11 - find total no of reviews for iphone 11 and iphone 12 category . Output should have only 2 rows (for 11 and 12).

12- which iphone has 3rd highest MRP

13- what is the average mrp of iphones which costs above 100,000

14- which iphone with 128 GB space has highest ratings to review ratio
"""

import numpy as np
import pandas as pd

df = pd.read_csv('/content/sample_data/iphone.csv')
df

"""1. The column names have spaces . rename the column names to have underscore '_' instead of space (try to do in one go instead of specifying each column nam in rename method)"""

col = df.columns
col

new_col = list(map(lambda x: x.replace(' ', '_'), col))
new_col

df.columns = new_col
df

"""2. 2- start rating for some of the models is missing in the dataset. fill those missing values with the average rating all the models."""

df['Star_Rating'] = round(df['Star_Rating'].fillna(df['Star_Rating'].mean()), 1)
df

"""3- Now instead of filling missing values with avg rating of full dataset , fill with avg rating based on RAM. example : if rating for a 2 gb phone is missing then take average of all other 2 gb phones rating and fill that value."""

ram_df = round(df.groupby('Ram', as_index=False)['Star_Rating'].mean(), 1)
ram_df = ram_df.set_index('Ram')
ram_df
abc = ram_df.loc['2 GB']['Star_Rating']
abc
#abc.values

#np.isnan(df["Star_Rating"][0])
bac = df.loc[0]['Star_Rating']
bac

for ind in df.index:
  if np.isnan(df[ind]['Star_Rating']):
    df.loc[ind]['Star_Rating'] = ram_df.loc[df.loc[ind]['Ram']]["Star_Rating"]
    #print(ram_df.loc[df.loc['Ram'][ind]]["Star_Rating"])
    #print(df.loc[ind]['Ram'])

print(df.value_counts())

"""4- create a new column in the dataframe "Discount_Percentage" based on MRP and sale value"""

df["Discount_Percentage"] = round(((df["Mrp"] - df["Sale_Price"]) * 100)/(df["Mrp"]), 2)
df

"""5- which model has highest percent discount ?"""

sorted_df = df.sort_values(by = 'Discount_Percentage', ascending = False)
sorted_df.head(1)

"""6- find total no of models each space configuration (128 GB , 64 GB etc)"""

# prompt: Make a new column Storage with only last 6 characters from Product_Name column

df['Storage'] = df['Product_Name'].apply(lambda x: x[-6:-1])
df['Storage_In_GB'] = df['Storage'].apply(lambda x: x[0:3])
df

storage_count = df['Storage'].value_counts()
storage_count = storage_count.reset_index()
storage_count.columns = ['Storage', 'Value']
storage_count

"""7- find total number of models for each color

"""

#df['Colour'] = df['Product_Name'].apply(lambda x: x[-17:-4])
#df['Colour'] = df['Colour'].apply(lambda x: x[0:-4])
df

df['Colour'].value_counts()

"""8- find total number of models by iphone version : eg
iphone 8:  9
iphone XR : 5
"""

df['version'] = df['Product_Name'].apply(lambda x: x[0:15])
vers = df['version'].value_counts().reset_index()
vers.columns = ['Model', 'Value']
vers

#df['Colour'] = df['Colour'].apply(lambda x: x[0:-4])

"""
9- list top 5 models having highest no of reviews"""

df_sorted = df.sort_values(by='Number_Of_Reviews', ascending=False)
df_sorted.head(5)

"""10 - what is the price diffrence between highest price and lowest price iphone (based on mrp)"""

difference = df['Mrp'].max() - df["Mrp"].min()
difference

"""11 - find total no of reviews for iphone 11 and iphone 12 category . Output should have only 2 rows (for 11 and 12)."""

df
ip11 = df['version'].str.contains('APPLE iPhone 11')
ip12 = df['version'].str.contains('APPLE iPhone 12')
ip11_val = df[ip11]['Number_Of_Reviews'].sum()
ip12_val = df[ip12]['Number_Of_Reviews'].sum()
cat_review = {'Model': ['APPLE iPhone 11', 'APPLE iPhone 12'] , 'Number Of Reviews': [ip11_val, ip12_val]}
cat_df = pd.DataFrame(cat_review)
cat_df

"""12- which iphone has 3rd highest MRP"""

df_sortmrp = df.sort_values('Mrp', ascending = False)
df_sortmrp.head(3).tail(1)

"""13- what is the average mrp of iphones which costs above 100,000

"""

average = df['Mrp'] > 100000
avg = df[average]['Mrp'].mean()
avg

"""14- which iphone with 128 GB space has highest ratings to review ratio"""

df
df['Storage_In_GB'].value_counts()
#con_col = (df['Storage_In_GB'] == 128)
# no Phone with 128 GB Storage

