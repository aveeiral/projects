# -*- coding: utf-8 -*-
"""MNIST_Fashion.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1scDT1KdOEooDWZVBdSb9OQgfcqFSumJt
"""

import tensorflow as tf

tf.__version__
from tensorflow import keras

keras.__version__

"""**Importing libraries** """

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

"""Importing Fashion Mnist dataset from keras.datasets

"""

fashion_mnist = keras.datasets.fashion_mnist
(X_train_full,y_train_full), (X_test, y_test) = fashion_mnist.load_data()

plt.imshow(X_train_full[2])
y_train_full[2]

class_names =["T-shirt/Top","Trouser","Pullover", "Dress", "Coat", "Sandal", "Shirt", "Sneaker", "Bag", "Ankle Boot"]
class_names

"""**Data Normalisation**

We normalise the data to perform Gradient Descent on data
"""

X_train_n = X_train_full/255
X_test_n = X_test /255

"""Splitting the data into training and validation(for hyperparameter tuning)

"""

X_valid, X_train = X_train_n[:5000], X_train_n[5000:]
y_valid, y_train = y_train_full[:5000], y_train_full[5000:]
X_test = X_test_n

"""random seed : Giving random values will generate the same random number and will generate the same output fr the program when run twice."""

np.random.seed(42)
tf.random.set_seed(42)

"""**Model Creation**

and viewing the summary of the created model
"""

model = keras.models.Sequential()
model.add(keras.layers.Flatten(input_shape=[28,28]))
model.add(keras.layers.Dense(300, activation="relu"))
model.add(keras.layers.Dense(100, activation="relu"))
model.add(keras.layers.Dense(10, activation="softmax"))
model.summary()

"""viewing the weights and biases

"""

weights, biases = model.layers[1].get_weights()
weights
weights.shape
biases
biases.shape

"""compiling the  model"""

model.compile(loss="sparse_categorical_crossentropy", optimizer="sgd", metrics=["accuracy"])

model_history = model.fit(X_train, y_train, epochs=30, validation_data=(X_valid, y_valid))

model_history.params
model_history.history

"""To visualize how our loss and accuracy is changing


"""

pd.DataFrame(model_history.history).plot(figsize=(8,5))
plt.grid(True)
plt.gca().set_ylim(0, 1)
plt.show

"""**Evaluate Model Performance**


"""

model.evaluate(X_test, y_test)

"""The above code will display the accuracy and loss function...

"""

X_new = X_test[:3]
y_pred = model.predict_classes(X_new)
y_pred

np.array(class_names)[y_pred]

plt.imshow(X_new[0])

plt.imshow(X_new[1])

plt.imshow(X_new[2])